
Міністерство освіти і науки України Харківський національний університет радіоелектроніки


Кафедра програмної інженерії





Звіт
з лабораторної роботи №2
з дисципліни "Архітектура програмного забезпечення" з теми: "Мобільний застосунок"







Виконав	Перевірив
ст. гр. ПЗПІ-22-9	Дашенков Д. С.
Алексієнко Євгеній














2025
 
1	ІСТОРІЯ ЗМІН

Таблиця 1 – Історія змін

№	Дата	Версія звіту	Опис змін та виправлень
1	25.05.2025	0.1	Створено звіт

2	ЗАВДАННЯ

Тема: Мобільний застосунок
У межах цієї лабораторної роботи необхідно створити мобільний додаток для Android платформи, призначений для моніторингу температури та руху з використанням ESP32 пристроїв. Додаток має бути частиною розумної системи моніторингу та взаємодіяти з сервером для отримання даних від підключених датчиків температури та руху. Для розробки використовується Kotlin для Android з інтеграцією REST API для взаємодії з backend сервером, що обробляє дані від ESP32 контролерів через MQTT протокол.
Додаток А: UI мобільного додатоку

3	ОПИС ВИКОНАНОЇ РОБОТИ

3.1	Опис прийнятих інженерних рішень


Під час розробки мобільного застосунку smart-monitoring-mobile було прийнято низку ключових технічних та архітектурних рішень, що забезпечили стабільність, модульність та потенціал для масштабування системи.
1.	Вибір мови Kotlin: Застосунок розроблено мовою Kotlin, що є офіційною та рекомендованою мовою для Android-розробки. Kotlin забезпечує лаконічний, безпечний та виразний синтаксис, а також повну сумісність з Java, що сприяє написанню чистого коду та зменшенню кількості типових помилок.
2.	Сучасна архітектура UI на Jetpack Compose: Користувацький інтерфейс реалізовано з використанням Jetpack Compose - сучасного декларативного підходу до побудови UI. Це дозволяє структурувати інтерфейс на модульні, незалежні компоненти, такі як LoginScreen, DashboardScreen, ProfileScreen, DeviceDetailScreen та інші. Такий підхід підвищує гнучкість навігації, спрощує керування станом UI та забезпечує легкість підтримки та повторного використання елементів інтерфейсу.
3.	Взаємодія з бекендом через Retrofit: Для комунікації з серверною частиною використано сучасну бібліотеку Retrofit. Вона дозволяє ефективно виконувати HTTP-запити та спрощує визначення API-інтерфейсів (як демонструє пакет api з AuthApiService, DeviceApiService, AnalyticsApiService). Retrofit автоматично обробляє дані у форматі JSON та підтримує асинхронні операції, що є критично важливим для мережевої взаємодії. Наявність NetworkModule вказує на централізовану конфігурацію мережевого клієнта.
4.	Багатошарова архітектура та розділення відповідальностей: Структура проєкту організована згідно з принципами багатошаровості, розділяючи різні аспекти функціональності на окремі пакети: 
	Шар даних (models, api, repository): Містить логіку, пов'язану з отриманням та обробкою даних від моніторингових пристроїв. Включає API-інтерфейси, моделі даних та репозиторії (AuthRepository, DeviceRepository, AnalyticsRepository), які абстрагують джерела даних.
	Шар UI (presentation/ui): Відповідає за відображення даних та взаємодію з користувачем, включаючи екрани (dashboard, auth, devices, profile, analytics) та навігацію.
	Шар ViewModel (presentation/viewmodel): Містить ViewModel класи (AuthViewModel, DeviceViewModel, AnalyticsViewModel), які готують дані для UI, обробляють бізнес-логіку, незалежну від конкретного UI-елементу, та забезпечують стійкість даних при зміні конфігурації. Таке розділення робить код більш організованим, легшим для тестування та підтримки.
5.	RESTful API для ключових функцій: Взаємодія з бекендом здійснюється через REST API, що підтримує ключові функції застосунку. На основі структури API, реалізовано запити для: 
	Авторизації та реєстрації користувачів (AuthRepository).
	Керування та отримання інформації про моніторингові пристрої (DeviceRepository).
	Отримання даних з датчиків температури та руху (AnalyticsRepository).
	Обробки конфігурацій пристроїв та налаштувань порогових значень температури. Це забезпечує надійну взаємодію з сервером для моніторингу температури та руху та керування ESP32 пристроями.
6.	Безпека: Авторизація користувачів реалізована з використанням JWT-токенів для забезпечення безпечного доступу до ресурсів. Проводиться валідація вхідних даних користувача на клієнтській стороні, що допомагає запобігти некоректним запитам.
7.	Масштабованість: Архітектура проєкту, з її чітким розподілом на шари (models, ui, repositories), використанням репозиторіїв та модульною структурою UI на Compose-екранах, спроєктована з урахуванням можливості легкого додавання нових функцій, типів моніторингових пристроїв або розширення функціоналу відстеження температури та руху в майбутньому.
Застосовані технічні та архітектурні рішення створили міцну основу для smart-monitoring-mobile, забезпечивши чистоту коду, високу продуктивність та зручність для подальшого розвитку проєкту моніторингу температури та руху з ESP32 контролерами.


3.2	Опис взаємодії компонентів мобільного застосунку одне з одним та з іншими елементами системи.

Мобільний застосунок smart-monitoring-mobile побудований на модульній архітектурі, де кожен екран виконує окрему логічну функцію. Взаємодія між внутрішніми компонентами та із зовнішніми сервісами реалізована через чітко визначені механізми, що забезпечують стабільність та масштабованість.
Взаємодія між компонентами застосунку:
	MainActivity: Виступає як головна "оболонка" або контейнер, у якому відображаються різні екрани, що складають інтерфейс застосунку.
	Compose-екрани: Основні екрани застосунку реалізовані з використанням Jetpack Compose (LoginScreen, DashboardScreen, ProfileScreen, DeviceDetailScreen тощо, як видно у пакеті presentation/ui). Екрани не взаємодіють напряму один з одним, а навігація між ними здійснюється за допомогою Compose Navigation.
	Передача даних між екранами: Для передачі необхідних даних (наприклад, ідентифікаторів моніторингових пристроїв) між екранами використовуються параметри навігації та аргументи Compose Navigation.
	ViewModel-и: Кожен екран має відповідний ViewModel (AuthViewModel, DeviceViewModel, AnalyticsViewModel), які керують станом UI та обробляють бізнес-логіку, забезпечуючи плавну взаємодію з користувачем.
Взаємодія з backend-сервером:
	Мережева бібліотека: Для комунікації з серверною частиною використовується сучасна бібліотека Retrofit у поєднанні з Kotlin Coroutines, що забезпечує ефективне та асинхронне виконання мережевих запитів.
	API-інтерфейси: Усі запити до серверного API описані у відповідних інтерфейсах (таких як AuthApiService, DeviceApiService, AnalyticsApiService), згрупованих у пакеті api. Конфігурація мережевого клієнта централізована у NetworkModule.
	Моделі даних: Дані, що надходять із сервера у форматі JSON, автоматично мапляються у відповідні Kotlin класи-моделі (наприклад, Device, SensorData, User, AnalyticsData) з пакету models. Ці моделі потім використовуються для відображення даних в UI або для внутрішньої логіки.
	Асинхронність: Усі мережеві операції є асинхронними, що запобігає блокуванню головного потоку UI та забезпечує плавну роботу застосунку під час обміну даними про температуру та рух.
	Репозиторії: Шар репозиторіїв (AuthRepository, DeviceRepository, AnalyticsRepository) абстрагує джерела даних, надаючи єдиний інтерфейс для отримання даних про моніторингові пристрої, який може працювати як з мережею, так і потенційно з локальним кешем.
Взаємодія з моніторинговими пристроями (через сервер):
	Мобільний застосунок взаємодіє з ESP32 моніторинговими пристроями опосередковано – через backend-сервер.
	Застосунок може надсилати команди або запити на сервер для керування пристроями (наприклад, додавання нового ESP32 пристрою, налаштування порогових значень температури через відповідні UI-екрани та API-запити).
	Застосунок отримує дані від сервера про стан моніторингових пристроїв, показники температури та руху з різних датчиків (DeviceApiService, AnalyticsApiService), аналітичні дані та важливі події чи оповіщення.
	Таким чином, сервер виступає посередником, обробляючи комунікацію з самими ESP32 пристроями через MQTT протокол та надаючи мобільному застосунку необхідні дані та функціональність для моніторингу температури та руху та базового керування системами розумного моніторингу.
Загалом, мобільний застосунок smart-monitoring-mobile реалізує чисту та структуровану взаємодію між внутрішніми компонентами (екранами, ViewModel-ами, моделями, репозиторіями) та бекенд-сервером, що забезпечує ефективний моніторинг та керування підключеними ESP32 моніторинговими пристроями, а також робить архітектуру зрозумілою та масштабованою

 
3.3	UML діаграма прецедентів (Use Case Diagram)

 
Рисунок 3.1 – UML діаграма прецедентів



3.4	ER-модель даних (Entity–Relationship Model) мобільної платформи.

 
Рисунок 3.2 –ER-діаграма даних

3.5	UML діаграма діяльності (Activity Diagram);


 

Рисунок 3.4 – UML діаграма діяльності


4	ВИСНОВКИ

У ході виконання лабораторної роботи було розроблено повноцінний мобільний застосунок smart-monitoring-mobile мовою Kotlin для платформи Android. Застосунок реалізує функціонал авторизації користувачів, відображення профілю, перегляду списку підключених ESP32 пристроїв, моніторингу показників температури та руху з множинних датчиків та роботи з історією вимірювань. Було прийнято низку інженерних рішень, зокрема використано сучасну архітектуру на основі Jetpack Compose, бібліотеку Retrofit у поєднанні з Kotlin Coroutines для ефективної асинхронної взаємодії з бекенд-сервером. Бекенд-частина побудована на Node.js та працює з базою даних MongoDB через Mongoose ODM, забезпечуючи обмін даними з ESP32 контролерами через MQTT протокол. Мобільна частина реалізує взаємодію з моніторинговими пристроями (ESP32 з датчиками температури та руху) опосередковано через сервер. Структура проєкту є масштабованою, логічно поділеною на компоненти (згідно з принципами багатошарової архітектури: models, api, repositories, presentation/ui, presentation/viewmodel) та відповідає вимогам сучасної клієнт-серверної системи моніторингу та керування пристроями з можливістю відстеження трендів температури і руху та аналітики даних.
