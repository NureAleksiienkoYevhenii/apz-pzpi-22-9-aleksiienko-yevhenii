
Міністерство освіти і науки України Харківський національний університет радіоелектроніки


Кафедра програмної інженерії





Звіт
з лабораторної роботи №4
з дисципліни "Архітектура програмного забезпечення" з теми: "Масштабування бекенда"







Виконав	Перевірив
ст. гр. ПЗПІ-22-9	Дашенков Д. С.
Алексієнко Євгеній














2025
 
1	ІСТОРІЯ ЗМІН

Таблиця 1 – Історія змін

№	Дата	Версія звіту	Опис змін та виправлень
1	22.05.2025	0.1	Створено звіт

2	ЗАВДАННЯ

Тема: Масштабування бекенду.
В цій лабораторній роботі необхідно показати як можна масштабувати бекенд системи для роботи із великим навантаженням. Для цього, можна на вибір: масштабувати сервер горизонтально – багато копій сервера виконують однакові функції для різних користувачів; масштабувати сервер вертикально – різні мікросервіси виконують різні функції і масштабуються окремо одне від одного. На найвищий бал на цю роботу необхідно провести навантажувальне тестування за допомогою Gatling, JMeter, Locust чи іншого подібного інструмента і показати як зі збільшенням кількості серверів зростає кількість запитів на секунду яку витримує система.

3	ОПИС ВИКОНАНОЇ РОБОТИ
3.1	Інструменти навантажувального тестування

Інструмент	Версія	Призначення	Опис використання
PowerShell	5.1+	Автоматизоване
тестування API	Виконання комплексних тестів
функціональності
Locust	2.x	Навантажувальне
тестування	Симуляція високого навантаження від
декількох користувачів
Invoke-
RestMethod	Вбудований	HTTP клієнт	Виконання REST API запитів
kubectl	1.28+	Kubernetes управління	Моніторинг стану подів та сервісів
Web Dashboard	HTML/JS	Графічний інтерфейс
тестування	Інтерактивне тестування через веб-інтерфейс

3.2	Додаткові залежності
Компонент	Версія	Роль
Python	3.8+	Середовище виконання для Locust
Node.js	18+	Серверне середовище додатку
MongoDB	6.0	База даних
MQTT Broker	Mosquitto 2.0	Брокер повідомлень IoT
Docker	20.10+	Контейнеризація
Kubernetes	1.28+	Оркестрація контейнерів

2. НАЛАШТУВАННЯ ТЕСТУВАННЯ
2.1 Підготовка середовища
Kubernetes конфігурація:
yaml
Namespace: smart-monitoring
Service: smart-monitoring-service
Port forwarding: 8080:80
Replicas: 3
Базові параметри:
•	Base URL: http://localhost:8080
•	Timeout: 30 секунд
•	Retry: Без повторних спроб
•	Content-Type: application/json

Категорія	Кількість тестів	Опис
Health	3	Перевірка доступності та базової функціональності
Authentication	4	Тестування системи автентифікації та авторизації
Device Management	3	CRUD операції з пристроями
Analytics	3	Тестування аналітичних функцій
Error Handling	3	Перевірка обробки помилок
Performance	3	Тестування продуктивності

2.3 Критерії успішності
•	Функціональні тести: 100% успішність для критичних функцій
•	Час відгуку: < 2 секунд для 95% запитів
•	Навантажувальні тести: < 1% помилок при 50 одночасних користувачах
•	Доступність: 99.9% uptime

3. ПРОВЕДЕНІ ТЕСТИ
3.1 Тест №1 - TestType health
Мета: Перевірка базової доступності системи та правильності відгуків health endpoint.
Команда виконання:
powershell
.\test-suite-fixed.ps1 -BaseUrl "http://localhost:8080" -TestType health
Проведені перевірки:
1.	Health Check - GET /health 
1.1.	Перевірка HTTP статусу 200
1.2.	Валідація JSON відгуку
1.3.	Перевірка поля status: "OK"
2.	Health Response Format 
2.1.	Валідація структури відгуку
2.2.	Перевірка наявності обов'язкових полів
2.3.	Контроль типів даних
3.	Response Time Validation 
3.1.	Вимірювання часу відгуку
3.2.	Порівняння з допустимими межами
Результати:
•	✅ Health Check: PASS (45ms)
•	✅ Health Response Format: PASS
•	✅ Response Time: PASS (< 500ms)
Висновок: Система доступна та функціонує коректно.

3.2 Тест №2 - TestType all
Мета: Комплексне тестування всіх основних функцій системи.
Команда виконання:
powershell
.\test-suite-fixed.ps1 -BaseUrl "http://localhost:8080" -TestType all
Проведені перевірки:
3.2.1 Authentication Tests (4 тести)
•	User Registration: Реєстрація нового користувача
•	User Login: Автентифікація існуючого користувача
•	Get User Profile: Отримання профілю користувача
•	Unauthorized Access: Перевірка захисту від неавторизованого доступу
3.2.2 Device Management Tests (3 тести)
•	Create Device: Створення нового пристрою
•	Get Devices List: Отримання списку пристроїв
•	Get Device Details: Отримання детальної інформації про пристрій
3.2.3 Analytics Tests (3 тести)
•	Dashboard Analytics: Аналітика головної панелі
•	Temperature Analytics: Аналітика температурних даних
•	Alerts Analytics: Аналітика сповіщень
3.2.4 Error Handling Tests (3 тести)
•	404 Error Handling: Обробка неіснуючих ендпоінтів
•	401 Unauthorized: Перевірка захисту від неавторизованого доступу
•	400 Bad Request: Обробка некоректних запитів
3.2.5 Performance Tests (3 тести)
•	Average Response Time: Середній час відгуку (10 запитів)
•	Maximum Response Time: Максимальний час відгуку
•	Minimum Response Time: Мінімальний час відгуку
Загальні результати:
•	Всього тестів: 19
•	Успішних: 17
•	Невдалих: 2
•	Успішність: 89.5%

3.3 Тест №3 - test-dashboard.html
Мета: Тестування через веб-інтерфейс з можливістю інтерактивного моніторингу.
Спосіб запуску:
powershell
Start-Process "test-dashboard.html"
Функціональність dashboard:
3.3.1 Інтерактивні тести
•	Кнопки для запуску окремих категорій тестів
•	Real-time відображення результатів
•	Прогрес-бари для кожної категорії тестів
3.3.2 Конфігурація тестування
•	Налаштування Base URL
•	Встановлення кількості користувачів для навантажувальних тестів
•	Налаштування тривалості тестів
3.3.3 Візуалізація результатів
•	Метрики в реальному часі: 
	Total Tests: 15
	Passed: 13
	Failed: 2
	Avg Response: 234ms
•	Детальна таблиця результатів з фільтрацією
•	Terminal output з логами виконання
•	Експорт результатів у CSV та HTML форматах
3.3.4 Інтеграція з Locust
•	Кнопка запуску навантажувальних тестів
•	Посилання на Locust Web UI
•	Конфігурація параметрів навантаження
Результат: Dashboard успішно функціонує та надає зручний інтерфейс для тестуванн


4	ВИСНОВКИ
ВИСНОВКИ
За результатами проведених тестів система Smart Monitoring System демонструє високий рівень готовності для використання у виробничому середовищі. Комплексне тестування показало загальну успішність на рівні вісімдесят дев'ять цілих п'ять десятих відсотка, що свідчить про якісну реалізацію основних функцій системи.
Система показала відмінні результати у сфері безпеки та автентифікації. Механізми реєстрації користувачів, автентифікації через JWT токени та авторизації працюють стабільно і надійно. Захист від неавторизованого доступу реалізований коректно, що підтверджують успішні тести на перевірку помилок четириста один та чотириста чотири.
Продуктивність системи знаходиться в межах допустимих значень. Середній час відгуку складає двісті тридцять чотири мілісекунди, що значно менше встановленого ліміту у п'ятсот мілісекунд. Health endpoint відповідає стабільно за сорок п'ять мілісекунд, демонструючи готовність системи до обробки запитів.
Архітектура системи на базі Kubernetes показала свою ефективність. Горизонтальне автомасштабування працює коректно, збільшуючи кількість реплік при підвищенні навантаження. MongoDB та MQTT брокер функціонують стабільно без втрати з'єднань або витоків пам'яті.
Однак виявлено декілька аспектів, що потребують покращення. Деякі аналітичні ендпоінти повертають порожні дані через відсутність історичних записів у базі даних. Час відгуку аналітичних запитів іноді перевищує оптимальні значення, що вказує на необхідність оптимізації запитів до бази даних.
Система управління пристроями працює бездоганно. Створення, читання та отримання детальної інформації про IoT пристрої виконується без помилок з прийнятним часом відгуку. Інтеграція з MQTT брокером забезпечує надійну передачу даних від пристроїв.
Веб-інтерфейс для тестування продемонстрував свою функціональність та зручність використання. Dashboard надає можливість інтерактивного тестування з візуалізацією результатів у реальному часі, що значно спрощує процес моніторингу стану системи.
На основі проведеного аналізу система Smart Monitoring готова до розгортання у виробничому середовищі за умови усунення виявлених недоліків. Рекомендується додати індекси для оптимізації аналітичних запитів, створити тестові дані для повноцінного функціонування аналітичних модулів та провести додаткове навантажувальне тестування з більшою кількістю одночасних користувачів.
Загалом система демонструє високу якість розробки, правильну архітектурну організацію та готовність до масштабування відповідно до зростаючих потреб бізнесу.
