Міністерство освіти і науки України Харківський національний університет радіоелектроніки


Кафедра програмної інженерії





Звіт
з лабораторної роботи №3
з дисципліни "Архітектура програмного забезпечення" з теми: " Веб застосунок "







Виконав	Перевірив
ст. гр. ПЗПІ-22-9	Дашенков Д. С.
Алексієнко Євгеній














2025
 
1	ІСТОРІЯ ЗМІН

Таблиця 1 – Історія змін

№	Дата	Версія звіту	Опис змін та виправлень
1	29.05.2025	0.1	Створено звіт

2	ЗАВДАННЯ

Тема: Веб застосунок
У межах цієї лабораторної роботи створено веб-застосунок Smart Monitoring System для браузерних платформ. Додаток є частиною системи розумного моніторингу IoT пристроїв та взаємодіє з backend API через HTTP-запити з використанням fetch API. Для розробки використано React.js для frontend розробки, з підтримкою адаптивного дизайну через Tailwind CSS для різних розмірів екранів та пристроїв.
Веб-застосунок забезпечує повнофункціональний користувацький інтерфейс системи розумного моніторингу з можливістю роботи як на десктопних комп'ютерах, так і на мобільних пристроях через веб-браузер.
У ДОДАТОК А вказанi основнi сторiнки веб iнтерфейсу

3	ОПИС ВИКОНАНОЇ РОБОТИ

Використані технології
	Для реалізації клієнтської частини системи використано:
	React 18.2.0 - основний UI фреймворк
	React Router DOM 6.20.0 - маршрутизація
	Socket.IO Client 4.7.4 - real-time зв'язок з сервером
	Tailwind CSS - стилізація компонентів
	Vite 5.0.0 - інструмент збірки та розробки
Архітектура системи

 
Рисунок 1 - Загальна структура додатка

Архітектура системи
Система Smart Monitoring System побудована за принципом трирівневої архітектури:
Frontend шар (React)
	Компоненти: Модульна структура з переиспользуваемими UI компонентами
	Маршрутизація: Публічні та захищені маршрути з ролевим доступом
	Стан: Контекстне управління мовами та глобальним станом
	Сервіси: Абстракція API викликів через спеціалізовані сервіси
API шар
	HTTP клієнт: Централізований fetch клієнт з обробкою помилок
	Автентифікація: Автоматичне додавання токенів та обробка помилок
	Real-time: Socket.IO для живих даних від IoT пристроїв
	Backend API
	RESTful ендпоінти: Розділені за функціональними модулями
	Автентифікація: JWT токени для безпечного доступу
	Авторизація: Ролевий контроль доступу (user/admin)
	WebSocket: Real-time передача даних від MQTT брокера
Локальне сховище
	Токени: Збереження JWT для підтримки сесій
	Налаштування: Кешування мовних та користувацьких налаштувань
	Синхронізація: Відстеження змін між вкладками

Архітектура компонентів
 
Рисунок 2 - Архітектура компонентів
Ієрархічна структура
	App рівень - Кореневий компонент з роутингом та глобальними провайдерами
	Layout компоненти - Загальні елементи інтерфейсу (хедер, сайдбар)
	Page компоненти - Основні сторінки з бізнес-логікою
	UI компоненти - Переиспользуваемі елементи інтерфейсу
	Common компоненти - Спільні компоненти (кнопки, карточки, спінери)

Принципи організації
	Компонентна ізоляція: Кожен компонент інкапсулює власну логіку
	Контекстне управління: AuthContext, LanguageContext для глобального стану
	Сервісний шар: Абстракція API викликів від UI компонентів
	Захищені маршрути: Контроль доступу за ролями
	Модульність: Розділення за функціональними областями

Потік даних
	Вгору: Events від дочірніх до батьківських компонентів
	Вниз: Props від батьківських до дочірніх компонентів
	Сервіси: API виклики через централізовані сервіси
	Контекст: Глобальний стан через React Context API
	Real-time: WebSocket з'єднання через SocketContext

Прийняті інженерні рішення

1. Архітектурні рішення
	Context API для управління глобальним станом:
	AuthContext - централізоване управління аутентифікацією
	LanguageContext - підтримка мультимовності (EN/UA)
	SocketContext - управління real-time з'єднаннями
	Автоматичне збереження налаштувань у localStorage

Маршрутизація на основі ролей:
const ProtectedRoute = ({ children, requireAdmin = false }) => {
  if (!user) return <Navigate to="/login" />;
  if (requireAdmin && user.role !== 'admin') return <Navigate to="/dashboard" />;
  return children;
};

Сервісна архітектура для API логіки:
	api.auth - управління аутентифікацією
	api.devices - робота з IoT пристроями
	api.analytics - отримання аналітичних даних
	api.admin - адміністративні функції

2. API взаємодія
Централізований HTTP клієнт:
const apiClient = {
  baseURL: API_URL,
  headers: { 'Content-Type': 'application/json' }
};

Автоматична обробка токенів:
	Додавання Bearer токена з localStorage
	Обробка 401 помилок та перенаправлення
	Real-time оновлення через Socket.IO

3. Компонентна архітектура
Переваги використаного підходу:
	Модульність та багаторазове використання компонентів
	Чітке розділення відповідальностей між UI та бізнес-логікою
	Легке тестування через сервісний шар
	Адаптивний дизайн через Tailwind CSS
	Інтернаціоналізація через систему перекладів
	Real-time моніторинг IoT пристроїв

Взаємодія компонентів

 
Рисунок 3 - Схема взаємодії користувацької частини

Ключові взаємодії:
	Аутентифікація - JWT токени через API
	Дані - REST запити + real-time через WebSocket
	Команди - HTTP → MQTT → IoT пристрої
	Моніторинг - MQTT → WebSocket → UI оновлення

 
Рисунок 4 - Схема взаємодії адміністративної частини

Адмін функції:
	Управління користувачами - CRUD операції, зміна ролей
	Моніторинг системи - перевірка здоров'я сервісів
	Обслуговування - очищення даних, системні задачі
	Аналітика - глобальна статистика всіх користувачів


1.	Адміністрування системи

 
Рисунок 5 - Структура адміністративної панелі

Структура адміністративної панелі
Основні секції
Tab Navigation - Верхня навігаційна панель з основними розділами:
	Dashboard - Загальна статистика системи
	Users - Управління користувачами
	System - Моніторинг здоров'я системи
	Maintenance - Обслуговування системи
	Main Content Area - Основна робоча область з вмістом:
Dashboard Tab
	Statistics Cards - Картки з ключовими метриками:
	Загальна кількість користувачів
	Активні користувачі
	Загальна кількість пристроїв
	Онлайн пристрої
	System Health - Стан сервісів системи:
	Database статус
	MQTT сервіс статус
	AI сервіс статус
	Recent Activity - Остання активність:
	Нові користувачі
	Нові пристрої
Users Tab
	Таблиця всіх користувачів системи
	User Info: Ім'я, email, роль, статус, кількість пристроїв
	Відображення останнього входу та дати реєстрації
System Tab
	System Metrics - Системні метрики
	Database Collections - Інформація про колекції БД
	Моніторинг продуктивності системи
Maintenance Tab
	Data Maintenance - Очищення старих даних
	System Actions - Системні операції та логи
	Інструменти для обслуговування системи
Особливості реалізації:
	Адаптивний дизайн для різних розмірів екранів
	Real-time оновлення статусу системи
	Ролевий контроль доступу (тільки для admin)
	Розширювана архітектура для майбутніх модулів

2.	UML діаграма прецедентів (Use Case Diagram)

 
Рисунок 6 - UML діаграма прецедентів

UML діаграма прецедентів (Use Case Diagram)
Основні актори:
	👤 Гість - незареєстрований користувач
	👤 Користувач - зареєстрований користувач системи
	👑 Адміністратор - користувач з розширеними правами
	🏠 IoT Пристрій - розумний пристрій моніторингу
Ключові відношення:
Include (обов'язкові залежності):
	🔒 Валідація токенів ← включається в усі операції після входу
	📧 Відправка email ← включається в реєстрацію та сповіщення
Extend (опціональні розширення):
	⚠️ Генерація сповіщень → розширює отримання сповіщень при критичних подіях
	📊 Встановлення лімітів → розширює налаштування сповіщень
	📊 Глобальна аналітика → розширює базову аналітику для адміністраторів
	🛠️ Обслуговування системи → розширює системний моніторинг
Опис основних прецедентів:
	Аутентифікація - базові операції входу/реєстрації з валідацією
	Моніторинг пристроїв - перегляд даних, управління, аналітика
	Адміністрування - системне управління та моніторинг
	IoT взаємодія - двосторонній обмін даними з пристроями


3.	UML діаграма діяльності (Activity Diagram)
 
Рисунок 9 - UML діаграма діяльності

Висновки
У рамках лабораторної роботи було успішно розроблено веб-застосунок Smart Monitoring System - комплексну систему моніторингу IoT пристроїв з повнофункціональним користувацьким інтерфейсом.
Досягнуті результати:
1. Технічна реалізація
•	Створено сучасний веб-застосунок на базі React 18.2.0 з використанням Vite як інструменту збірки
•	Реалізовано адаптивний дизайн через Tailwind CSS для коректної роботи на різних пристроях
•	Впроваджено real-time функціональність через Socket.IO для миттєвого оновлення даних від IoT пристроїв
2. Архітектурні рішення
•	Застосовано трирівневу архітектуру з чітким розділенням frontend, API та backend рівнів
•	Реалізовано модульну компонентну структуру з переиспользуваемими UI елементами
•	Впроваджено контекстне управління станом через React Context API для глобальних даних
3. Функціональність системи
•	Мультимовність - підтримка англійської та української мов
•	Ролевий доступ - розмежування прав між користувачами та адміністраторами
•	Real-time моніторинг - миттєве відображення даних від IoT пристроїв
•	Аналітична панель - візуалізація даних, тренди, AI рекомендації
•	Адміністративний модуль - управління користувачами та системою
4. Безпека та надійність
•	Реалізовано JWT аутентифікацію з автоматичним управлінням токенами
•	Впроваджено захищені маршрути з контролем доступу за ролями
•	Забезпечено валідацію даних на клієнтському рівні
5. Користувацький досвід
•	Інтуїтивний інтерфейс з сучасним дизайном
•	Швидкодія завдяки оптимізованій архітектурі
•	Адаптивність для роботи на мобільних пристроях та десктопі.

Посилання на youtube: https://youtu.be/qTAs-g192I4
Посилання на Github: https://github.com/NureAleksiienkoYevhenii/apz-pzpi-22-9-aleksiienko-yevhenii
